******************************************************************************
*******************************  42.MINISHELL  *******************************
************************************************************jchotel & fde-fram

LAST STEPS DONE :
- char d'échappement pour les arguments
- gestions des redirections sans pipes, fixing bugs
- début de ctrl-C
- suppression d'une variable d'env seulement si exacte

NEXT STEPS ON SCHEDULE :
- gérer les ctrl-C, ctrl-D, ctrl-\
- /bin/echo à gerer correctement, (path absolu)
- gérer les redirs de type <
- $? à gerer : permet de garder en mémoire le résultat de la ligne précédente
- FREE...

GENERAL INFOS ----------------------------------------------------------------
. SUBJECT ....................................................................
	fork -
	wait,
	waitpid,
	wait3,
	wait4,
	signal - autorise la manipulation d'un process
	kill,
	exit,
	getcwd - récupérer le path du working directory (pwd)
	chdir,
	stat - regarder l’état d’un fichier (prend en paramètre le chemin de ce fichier et une structure stat buff) (man 2)
	lstat,
	fstat,
	execve - doit être compris entre un fork et un wait
	dup,
	dup2,
	pipe,
	opendir,
	readdir,
	closedir,
	strerror,
	errno

. BIN ........................................................................
	* path absolu ?

. ECHO .......................................................................
	- -n n’affiche pas le dernier \n
	- caractères d’échappements dans le cas des arg entre « 
		- bonjour\toi		-> bonjourtoi
		- bonjour\\toi		-> bonjour\toi
		- bonjour\"toi		-> bonjour"toi
		- bonjour\’toi		-> bonjour’toi	: rien + \’ 	: sup le \ + ‘ pas compté

		- «bonjour\toi»		-> bonjour\toi	: double + \	: garde le \
		- "bonjour'toi"		-> bonjour'toi	: double + '	:
		- «bonjour\\toi»	-> bonjour\toi 	: double + \\	: garde un seul \
		- «bonjour\"toi»	-> bonjour"toi	: double + \" 	: sup le \
		- «bonjour\’toi»	-> bonjour\'toi	: double + \’ 	: garde le \

		- ‘bonjour\toi’		-> bonjour\toi	: simple + \	: garde le \
		- 'bonjour"toi'		-> bonjour"toi	: simple + "
		- ‘bonjour\\toi’	-> bonjour\\toi	: simple + \	: garde le \
		- 'bonjour\"toi'	-> bonjour\"toi : simple + \"	: garde le \
		- ‘bonjour\’toi’	-> >			: simple + \’	: ‘ compté

. UNSET ......................................................................
	- del les maillons spécifiés de env

. EXPORT .....................................................................
	- rajoute un maillon de env
	- si pas d’arg, afficher env par ordre alpha

. PIPES ......................................................................
	- https://stackoverflow.com/questions/43030966/pipe-chaining-in-my-own-shell-implementation
	- http://www.cs.loyola.edu/~jglenn/702/S2005/Examples/dup2.html

. REDIR ......................................................................
	- http://www.cs.loyola.edu/~jglenn/702/S2005/Examples/dup2.html
			O_WRONLY : 1				O_TRUNC : 1024
			O_CREAT : 512				O_APPEND : 8
		- 1537 pour la création, d'un fichier tronqué
		- 521 pour un fichier append



CORRECTIONS TEST -------------------------------------------------------------
	/!\ pour tester dans bash (et non zsh) à titre comparatif, entrer la commande « bash »
	- le parsing ; ne doit pas se faire si compris entre "
	- vérifier que dans les pipes, pas d’utilisation des bin par défaut
	- cat /dev/random | cat | cat | head -n 5 | cut -b 1-10 | cat -e > out1
	- ctrl-c doit être géré pour ne pas faire d’interruption avec Signal
	- cat /dev/random, ctr-c (demander à @mcraipea/maxime craipeau ou Jérome durand)
	* cat | cat | cat | cat | ls
        * not_cmd test > new : attention pour l'instant "Command not found : "

	- conseil : sdunckel / tharchen / mpivet-p

